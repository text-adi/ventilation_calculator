// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VentilationCalculator.Models;

#nullable disable

namespace VentilationCalculator.Migrations
{
    [DbContext(typeof(SystemContext))]
    [Migration("20230610155209_TEst")]
    partial class TEst
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("VentilationCalculator.Models.CityTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("TypeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("VentilationCalculator.Models.ConstantsTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Constants");
                });

            modelBuilder.Entity("VentilationCalculator.Models.InputDataTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AvgTemp")
                        .HasColumnType("INTEGER");

                    b.Property<long>("City")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CoefK")
                        .HasColumnType("REAL");

                    b.Property<long>("Concetration")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Coordinate")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CountPlace")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CountPrinter")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CountServer")
                        .HasColumnType("INTEGER");

                    b.Property<double>("GCO2")
                        .HasColumnType("REAL");

                    b.Property<double>("HeigthRoomOffice")
                        .HasColumnType("REAL");

                    b.Property<long>("InletTemp")
                        .HasColumnType("INTEGER");

                    b.Property<double>("InputTempSolar")
                        .HasColumnType("REAL");

                    b.Property<double>("LengthRoomOffice")
                        .HasColumnType("REAL");

                    b.Property<double>("LengthRoomServer")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialP")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialPFromTable")
                        .HasColumnType("REAL");

                    b.Property<double>("OfficeAir")
                        .HasColumnType("REAL");

                    b.Property<long>("OutletTemp")
                        .HasColumnType("INTEGER");

                    b.Property<double>("OutputAir")
                        .HasColumnType("REAL");

                    b.Property<double>("OutputTempAnother")
                        .HasColumnType("REAL");

                    b.Property<double>("OutputTempPC")
                        .HasColumnType("REAL");

                    b.Property<double>("OutputTempPeople")
                        .HasColumnType("REAL");

                    b.Property<double>("OutputTempServer")
                        .HasColumnType("REAL");

                    b.Property<double>("OutputTempTV")
                        .HasColumnType("REAL");

                    b.Property<double>("ReplaceTempC")
                        .HasColumnType("REAL");

                    b.Property<bool>("SaveMaterialSolar")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ServerAir")
                        .HasColumnType("REAL");

                    b.Property<long>("SideWorld")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TimeSavePlace")
                        .HasColumnType("REAL");

                    b.Property<long>("TypeCity")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TypeFrame")
                        .HasColumnType("INTEGER");

                    b.Property<long>("VariantId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WidthRoomOffice")
                        .HasColumnType("REAL");

                    b.Property<double>("WidthRoomServer")
                        .HasColumnType("REAL");

                    b.Property<double>("Zask")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("InputData");
                });

            modelBuilder.Entity("VentilationCalculator.Models.InputSolarTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("TypeFrameID")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Value")
                        .HasColumnType("INTEGER");

                    b.Property<long>("World")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("InputSolar");
                });

            modelBuilder.Entity("VentilationCalculator.Models.OutputTempPeopleTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CountTemp")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Temp")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("OutputTempPeople");
                });

            modelBuilder.Entity("VentilationCalculator.Models.PTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("P")
                        .HasColumnType("REAL");

                    b.Property<double>("Temp")
                        .HasColumnType("REAL");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("P");
                });

            modelBuilder.Entity("VentilationCalculator.Models.TypeCityTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("LimitValue")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TypeCity");
                });

            modelBuilder.Entity("VentilationCalculator.Models.TypeFrameTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TypeFrame");
                });
#pragma warning restore 612, 618
        }
    }
}
