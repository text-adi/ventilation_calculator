// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VentilationCalculator.Models;

#nullable disable

namespace VentilationCalculator.Migrations
{
    [DbContext(typeof(SystemContext))]
    [Migration("20230630170534_1")]
    partial class _1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("VentilationCalculator.Models.InputDataTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AvgTemp")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CountPlace")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CountPrinter")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CountServer")
                        .HasColumnType("INTEGER");

                    b.Property<double>("HeigthRoomOffice")
                        .HasColumnType("REAL");

                    b.Property<long>("InletTemp")
                        .HasColumnType("INTEGER");

                    b.Property<double>("InputTempSolar")
                        .HasColumnType("REAL");

                    b.Property<double>("LengthRoomOffice")
                        .HasColumnType("REAL");

                    b.Property<double>("LengthRoomServer")
                        .HasColumnType("REAL");

                    b.Property<double>("OfficeAir")
                        .HasColumnType("REAL");

                    b.Property<long>("OutletTemp")
                        .HasColumnType("INTEGER");

                    b.Property<double>("OutputAir")
                        .HasColumnType("REAL");

                    b.Property<double>("ReplaceTempC")
                        .HasColumnType("REAL");

                    b.Property<bool>("SaveMaterialSolar")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ServerAir")
                        .HasColumnType("REAL");

                    b.Property<long>("VariantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VariantText")
                        .HasColumnType("TEXT");

                    b.Property<double>("WidthRoomOffice")
                        .HasColumnType("REAL");

                    b.Property<double>("WidthRoomServer")
                        .HasColumnType("REAL");

                    b.Property<int>("comboBoxCategoryWork")
                        .HasColumnType("INTEGER");

                    b.Property<int>("comboBoxP")
                        .HasColumnType("INTEGER");

                    b.Property<int>("comboBoxRoom")
                        .HasColumnType("INTEGER");

                    b.Property<int>("comboBoxTypeRame")
                        .HasColumnType("INTEGER");

                    b.Property<int>("comboBoxWord")
                        .HasColumnType("INTEGER");

                    b.Property<int>("textBoxPeopleInCity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("InputData");
                });

            modelBuilder.Entity("VentilationCalculator.Models.VentilatorTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PathToFile")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Power")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("VirantVentilator");
                });
#pragma warning restore 612, 618
        }
    }
}
