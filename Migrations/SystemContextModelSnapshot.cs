// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VentilationCalculator.Models;

#nullable disable

namespace VentilationCalculator.Migrations
{
    [DbContext(typeof(SystemContext))]
    partial class SystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("VentilationCalculator.Models.AirDensityCategory", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<double>("AirDensity")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("AirDensityCategory", (string)null);
                });

            modelBuilder.Entity("VentilationCalculator.Models.AirDensityTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AtmosphericPressure")
                        .HasColumnType("REAL")
                        .HasColumnName("atmosphericPressure");

                    b.Property<long>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CategoryID");

                    b.Property<long>("TemperatureId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TemperatureID");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TemperatureId");

                    b.ToTable("AirDensityTable", (string)null);
                });

            modelBuilder.Entity("VentilationCalculator.Models.AirDensityTemp", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Temperature")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("AirDensityTemp", (string)null);
                });

            modelBuilder.Entity("VentilationCalculator.Models.AirExchangeRatioTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AirExchangeMultiplier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RoomType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AirExchangeRatioTable", (string)null);
                });

            modelBuilder.Entity("VentilationCalculator.Models.CategoryWork", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CategoryWork", (string)null);
                });

            modelBuilder.Entity("VentilationCalculator.Models.Co2LevelTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Co2Limit")
                        .HasColumnType("REAL");

                    b.Property<string>("Teritory")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Co2LevelTable", (string)null);
                });

            modelBuilder.Entity("VentilationCalculator.Models.FrameType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FrameType", (string)null);
                });

            modelBuilder.Entity("VentilationCalculator.Models.InputDatum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CountPrinter")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CountServer")
                        .HasColumnType("INTEGER");

                    b.Property<long>("InletTemp")
                        .HasColumnType("INTEGER");

                    b.Property<double>("LengthRoom")
                        .HasColumnType("REAL");

                    b.Property<long>("OutletTemp")
                        .HasColumnType("INTEGER");

                    b.Property<long>("VariantId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VariantID");

                    b.Property<double>("WidthRoom")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("InputData");
                });

            modelBuilder.Entity("VentilationCalculator.Models.PeopleHeatOutput", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AirTemp")
                        .HasColumnType("REAL");

                    b.Property<long>("CategoryWorkId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CategoryWorkID");

                    b.Property<long>("TempWorkId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TempWorkID");

                    b.HasKey("Id");

                    b.HasIndex("CategoryWorkId");

                    b.HasIndex("TempWorkId");

                    b.ToTable("PeopleHeatOutput", (string)null);
                });

            modelBuilder.Entity("VentilationCalculator.Models.SolarHeatGainThroughGlazing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("FrameTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FrameTypeID");

                    b.Property<double>("InletTemp")
                        .HasColumnType("REAL");

                    b.Property<string>("СompassDirection")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FrameTypeId");

                    b.ToTable("SolarHeatGainThroughGlazing", (string)null);
                });

            modelBuilder.Entity("VentilationCalculator.Models.TempWork", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CountInWorkPlace")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("TempWork", (string)null);
                });

            modelBuilder.Entity("VentilationCalculator.Models.AirDensityTable", b =>
                {
                    b.HasOne("VentilationCalculator.Models.AirDensityCategory", "Category")
                        .WithMany("AirDensityTables")
                        .HasForeignKey("CategoryId")
                        .IsRequired();

                    b.HasOne("VentilationCalculator.Models.AirDensityTemp", "Temperature")
                        .WithMany("AirDensityTables")
                        .HasForeignKey("TemperatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Temperature");
                });

            modelBuilder.Entity("VentilationCalculator.Models.PeopleHeatOutput", b =>
                {
                    b.HasOne("VentilationCalculator.Models.CategoryWork", "CategoryWork")
                        .WithMany("PeopleHeatOutputs")
                        .HasForeignKey("CategoryWorkId")
                        .IsRequired();

                    b.HasOne("VentilationCalculator.Models.TempWork", "TempWork")
                        .WithMany("PeopleHeatOutputs")
                        .HasForeignKey("TempWorkId")
                        .IsRequired();

                    b.Navigation("CategoryWork");

                    b.Navigation("TempWork");
                });

            modelBuilder.Entity("VentilationCalculator.Models.SolarHeatGainThroughGlazing", b =>
                {
                    b.HasOne("VentilationCalculator.Models.FrameType", "FrameType")
                        .WithMany("SolarHeatGainThroughGlazings")
                        .HasForeignKey("FrameTypeId");

                    b.Navigation("FrameType");
                });

            modelBuilder.Entity("VentilationCalculator.Models.AirDensityCategory", b =>
                {
                    b.Navigation("AirDensityTables");
                });

            modelBuilder.Entity("VentilationCalculator.Models.AirDensityTemp", b =>
                {
                    b.Navigation("AirDensityTables");
                });

            modelBuilder.Entity("VentilationCalculator.Models.CategoryWork", b =>
                {
                    b.Navigation("PeopleHeatOutputs");
                });

            modelBuilder.Entity("VentilationCalculator.Models.FrameType", b =>
                {
                    b.Navigation("SolarHeatGainThroughGlazings");
                });

            modelBuilder.Entity("VentilationCalculator.Models.TempWork", b =>
                {
                    b.Navigation("PeopleHeatOutputs");
                });
#pragma warning restore 612, 618
        }
    }
}
